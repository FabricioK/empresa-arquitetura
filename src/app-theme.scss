@import '~@angular/material/_theming.scss';
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat-core();

// define a real custom palette (using http://mcg.mbitson.com)
$bv-brand: (
    50: #47ff0c,
    100: #47ff0c,
    200: #b4c9e4,
    300: #7fa3d1,
    400: #6992c9,
    500: #47ff0c,
    600: #47ff0c,
    700: #38649d,
    800: #305687,
    900: #284770,
    A100: #47ff0c,
    A200: #47ff0c,
    A400: #6992c9,
    A700: #38649d,
    contrast: (
        50: $black-87-opacity,
        100: $black-87-opacity,
        200: $black-87-opacity,
        300: $black-87-opacity,
        400: $black-87-opacity,
        500: white,
        600: white,
        700: white,
        800: white,
        900: white,
        A100: $black-87-opacity,
        A200: $black-87-opacity,
        A400: $black-87-opacity,
        A700: #47ff0c,
    )
);

$candy-app-primary: mat-palette($bv-brand);
$candy-app-accent:  mat-palette($mat-pink, A200, A100, A400);

// The warn palette is optional (defaults to red).
$candy-app-warn:    mat-palette($mat-red);

// Create the theme object (a Sass map containing all of the palettes).
$candy-app-theme: mat-light-theme($candy-app-primary, $candy-app-accent, $candy-app-warn);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include angular-material-theme($candy-app-theme);